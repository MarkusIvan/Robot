import "hardhat/console.sol";
pragma solidity >0.8.2;

library StringComparer{
    function compare(string memory str1, string memory str2) public pure returns (bool) {
        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));
    }
}

abstract contract Animal{
    string name;

    constructor(string memory _name){
        name = _name;
    }

    function eat(string calldata _food) virtual public returns(string memory){
        return "Animals eats";
    }
    function sleep() public view returns(string memory){
        return "Z-z-z-z-z-z-z-z";
    }
    function speak() virtual public view returns(string memory){
        return "Animals speak";
    }
}

abstract contract Herbivore is Animal{
    string canEat = "plant";

    function eat(string calldata _food) override virtual view public returns (string memory){
        require(StringComparer.compare(_food, canEat), "Herbivore cannot eat this!");
        return "Nom-nom";
    }
}

abstract contract Carnivore is Animal{
    string eatsMeat = "meat";

    function eat(string calldata _food) override virtual view public returns (string memory){
        require(StringComparer.compare(_food, eatsMeat), "Carnivore cannot eat this!");
        return "Nom-nom";
    }
}

abstract contract Omnivore is Animal{
    string eatsPlant = "plant";
    string eatsMeat = "meat";
    string cantEatChocolate = "chocolate";
    function eat(string calldata _food) override virtual view public returns (string memory){
        require(StringComparer.compare(_food, eatsPlant) || StringComparer.compare(_food, eatsMeat) || StringComparer.compare(_food, cantEatChocolate), "Omnivore cannot eat this!");
        return "Nom-nom";
    }
}

contract Horse is Herbivore{
    constructor(string memory _name) Animal(_name){
    }

    function speak() override view public returns (string memory){
        return "I-go-go";
    }
}

contract Cow is Herbivore{
    constructor(string memory _name) Animal(_name){ 
    }
    function speak() override view public returns (string memory){
        return "Moooooooo";
    }
}

contract Dog is Carnivore{
    string eatsPlant = "plant";
    constructor(string memory _name) Animal(_name){
    }

    function eat(string calldata _food) override view public returns (string memory){
        require(!StringComparer.compare(_food, "chokolate"), "Dogs cannot eat chocolate!");

        if(StringComparer.compare(_food, eatsMeat) || StringComparer.compare(_food,eatsPlant)){
            return "Nom-nom";
        }
        revert("Dog cannot eat this");
    }

    function speak() override view public returns (string memory){
        return "Gav-gav-gav";
    }
}

contract Wolf is Carnivore{
    constructor(string memory _name) Animal(_name){
    }

    function speak() override view public returns (string memory){
        return "A-wooooooo";
    }
}

contract Pig is Omnivore{
    constructor(string memory _name) Animal(_name){
    }

}
